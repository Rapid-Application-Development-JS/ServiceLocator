{"version":3,"sources":["servicelocator.min.js"],"names":["root","factory","define","amd","ServiceLocator","module","exports","this","mix","object","key","index","mixins","Array","prototype","slice","call","arguments","__mixins","length","undefined","push","invoke","Constructor","mixin","args","Temp","instance","deleteProperty","propertyList","recursion","hasOwnProperty","Object","getPrototypeOf","unMix","serviceInvoke","serviceName","printLog","console","log","servicesWrap","creator","id","serviceMixin","varType","variable","toString","toLowerCase","isObject","isString","isFunction","serviceHasCreator","scope","isRegistered","flag","setMixin","objectWithMixins","getMixin","register","serviceObject","instantiate","constructorArguments","warn","service","isInstantiated","get","instantiateAll","filter","name","result","getAllInstantiate","asObject","removeInstance","unRegister","removeMixins","unRegisterAll","getAllRegistered","serviceLocator"],"mappings":"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","file":"servicelocator.min.js","sourcesContent":["(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(function () {\n\t\t\treturn (root.ServiceLocator = factory());\n\t\t});\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = (root.ServiceLocator = factory());\n\t} else {\n\t\troot.ServiceLocator = factory();\n\t}\n}(this, function () {\n\t'use strict';\n\tvar serviceLocator;\n\n\t/**\n\t * Service locator\n\t * @class ServiceLocator\n\t * @constructor\n\t * @version 1.0.3\n\t */\n\tfunction ServiceLocator() {\n\t\t/**\n\t\t * Wrapper object for services\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tvar servicesWrap = {};\n\t\t/**\n\t\t * Set of mixins which have to contain all services registered\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tvar serviceMixin = {};\n\t\t/**\n\t\t * Print log\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tvar printLog = false;\n\n\t\t/**\n\t\t * Add mixins to object. Extends with <__mixins> parameter.\n\t\t * @param {Object} object\n\t\t * @param {...*}\n\t\t * @example mix(objectToAddMixin, {id: 12345}, {serviceMixin: function () {}});\n\t\t */\n\t\tfunction mix(object/*, ...mixins*/) {\n\t\t\tvar mixins = Array.prototype.slice.call(arguments, 1), key, index;\n\t\t\tobject.__mixins = [];\n\t\t\tfor (index = 0; index < mixins.length; ++index) {\n\t\t\t\tfor (key in mixins[index]) {\n\t\t\t\t\tif (object[key] === undefined) {\n\t\t\t\t\t\tobject[key] = mixins[index][key];\n\t\t\t\t\t\tobject.__mixins.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Invoke new object\n\t\t * @param {Function} Constructor\n\t\t * @param {Object} mixin\n\t\t * @param {Array=} args\n\t\t * @return {Object}\n\t\t */\n\t\tfunction invoke(Constructor, mixin, args) {\n\t\t\tvar instance;\n\n\t\t\tfunction Temp(mixins) {\n\t\t\t\tvar index, key;\n\t\t\t\tif (!mixins) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tthis.__mixins = [];\n\t\t\t\tfor (index = 0; index < mixins.length; ++index) {\n\t\t\t\t\tfor (key in mixins[index]) {\n\t\t\t\t\t\tthis[key] = mixin[index][key];\n\t\t\t\t\t\tthis.__mixins.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tTemp.prototype = Constructor.prototype;\n\t\t\tConstructor.prototype = new Temp(mixin);\n\t\t\tinstance = new Constructor(args);\n\t\t\tConstructor.prototype = Temp.prototype;\n\t\t\treturn instance;\n\t\t}\n\n\t\t/**\n\t\t * Remove properties from object\n\t\t * @param {Object} object\n\t\t * @param {Object} propertyList\n\t\t */\n\t\tfunction deleteProperty(object, propertyList) {\n\t\t\tvar index;\n\t\t\tif (!object || propertyList.recursion > 1000) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpropertyList.recursion++;\n\t\t\tif (object.hasOwnProperty('__mixins')) {\n\t\t\t\tfor (index = 0; index < propertyList.length; index += 1) {\n\t\t\t\t\tdelete object[propertyList[index]];\n\t\t\t\t}\n\t\t\t\tdelete object.__mixins;\n\t\t\t} else {\n\t\t\t\tdeleteProperty(Object.getPrototypeOf(object), propertyList);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Remove <__mixins> from object\n\t\t * @param {Object} object\n\t\t * @return {Object}\n\t\t */\n\t\tfunction unMix(object) {\n\t\t\tobject.__mixins.recursion = 0;\n\t\t\tdeleteProperty(object, object.__mixins);\n\t\t\treturn object;\n\t\t}\n\n\t\t/**\n\t\t * Instantiate <service>\n\t\t * @param {String} serviceName\n\t\t * @return {Object}\n\t\t */\n\t\tfunction serviceInvoke(serviceName) {\n\t\t\tprintLog && console.log('Instantiate: ' + serviceName);\n\t\t\tservicesWrap[serviceName].instance = invoke(\n\t\t\t\tservicesWrap[serviceName].creator,\n\t\t\t\t[{id: serviceName}, serviceMixin],\n\t\t\t\tservicesWrap[serviceName].args || []\n\t\t\t);\n\t\t\treturn servicesWrap[serviceName].instance;\n\t\t}\n\n\t\t/**\n\t\t * Get variable type\n\t\t * @param {*} variable\n\t\t * @return {String}\n\t\t * @private\n\t\t * @since 1.0.3\n\t\t */\n\t\tfunction varType(variable) {\n\t\t\treturn Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n\t\t}\n\n\t\t/**\n\t\t * Checks if `value` is object-like.\n\t\t * @param {*} variable\n\t\t * @return {boolean}\n\t\t * @private\n\t\t * @since 1.0.3\n\t\t */\n\t\tfunction isObject(variable) {\n\t\t\treturn varType(variable) === 'object';\n\t\t}\n\n\t\t/**\n\t\t * Checks if `value` is string.\n\t\t * @param {*} variable\n\t\t * @return {boolean}\n\t\t * @private\n\t\t * @since 1.0.3\n\t\t */\n\t\tfunction isString(variable) {\n\t\t\treturn typeof variable === 'string';\n\t\t}\n\n\t\t/**\n\t\t * Checks if `value` is function.\n\t\t * @param {*} variable\n\t\t * @return {boolean}\n\t\t * @private\n\t\t * @since 1.0.3\n\t\t */\n\t\tfunction isFunction(variable) {\n\t\t\treturn typeof variable === 'function';\n\t\t}\n\n\t\t/**\n\t\t * Service had constructor function\n\t\t * @param {String} serviceName\n\t\t * @return {boolean}\n\t\t * @private\n\t\t * @since 1.0.3\n\t\t */\n\t\tfunction serviceHasCreator(serviceName) {\n\t\t\tif (!scope.isRegistered(serviceName)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn 'creator' in servicesWrap[serviceName];\n\t\t}\n\n\t\tvar scope = {\n\t\t\t/**\n\t\t\t * Takes true/false values as a parameter.\n\t\t\t * When true, writes information about events and channels into the browser console.\n\t\t\t * @param {boolean=} flag - default is false\n\t\t\t * @return {Object}\n\t\t\t * @public\n\t\t\t */\n\t\t\tprintLog: function (flag) {\n\t\t\t\tprintLog = !!flag;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Takes an object as a parameter. The object contains a set of additional properties and/or methods,\n\t\t\t * which have to contain all objects registered in <ServiceLocator>.\n\t\t\t * @param {Object} objectWithMixins\n\t\t\t * @return {Object}\n\t\t\t * @public\n\t\t\t */\n\t\t\tsetMixin: function (objectWithMixins) {\n\t\t\t\tif (isObject(objectWithMixins)) {\n\t\t\t\t\tserviceMixin = objectWithMixins;\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Return current set mixins\n\t\t\t * @return {Object}\n\t\t\t * @public\n\t\t\t * @since 1.0.3\n\t\t\t */\n\t\t\tgetMixin: function () {\n\t\t\t\treturn serviceMixin;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Takes an object as a parameter. The object contains a set of additional properties and/or methods,\n\t\t\t * which have to contain all objects registered in <ServiceLocator>.\n\t\t\t * If no parameters passed, or not an Object, only return current mixins.\n\t\t\t * @param {Object=} objectWithMixins\n\t\t\t * @return {Object}\n\t\t\t * @public\n\t\t\t * @since 1.0.3\n\t\t\t */\n\t\t\tmixin: function (objectWithMixins) {\n\t\t\t\tthis.setMixin(objectWithMixins);\n\t\t\t\treturn this.getMixin();\n\t\t\t},\n\t\t\t/**\n\t\t\t * Registers an object <serviceObject> under the name <serviceName>. The flag <instantiate> shows,\n\t\t\t * whether lazy instantiation is required to request the object from <ServiceLocator>.\n\t\t\t * By default instantiate is <true>.\n\t\t\t * @param {String} serviceName\n\t\t\t * @param {Function|Object} serviceObject\n\t\t\t * @param {boolean=} instantiate - default is true\n\t\t\t * @param {Array=} constructorArguments\n\t\t\t * @return {boolean}\n\t\t\t * @public\n\t\t\t */\n\t\t\tregister: function (serviceName, serviceObject, instantiate, constructorArguments) {\n\t\t\t\tif (!isString(serviceName) || !serviceName.length) {\n\t\t\t\t\tprintLog && console.warn('serviceName must be type of string: [' + serviceName + ']');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!isFunction(serviceObject) && !isObject(serviceObject)) {\n\t\t\t\t\tprintLog && console.warn('serviceObject argument is empty or have wrong type: [' + serviceObject + ']');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (this.isRegistered(serviceName)) {\n\t\t\t\t\tprintLog && console.warn('You try to register already registered module: [' + serviceName + ']');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tinstantiate = arguments.length < 3 ? true : !!instantiate;\n\t\t\t\tswitch (typeof serviceObject) {\n\t\t\t\t\tcase 'function':\n\t\t\t\t\t\tservicesWrap[serviceName] = {\n\t\t\t\t\t\t\tcreator: serviceObject\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (arguments.length > 3) {\n\t\t\t\t\t\t\tservicesWrap[serviceName].args = constructorArguments;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (instantiate) {\n\t\t\t\t\t\t\tvar service;\n\t\t\t\t\t\t\tif ('args' in servicesWrap[serviceName]) {\n\t\t\t\t\t\t\t\tservice = invoke(serviceObject, {}, servicesWrap[serviceName].args);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tservice = invoke(serviceObject, {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmix(service, {id: serviceName}, serviceMixin);\n\t\t\t\t\t\t\tservicesWrap[serviceName].instance = service;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'object':\n\t\t\t\t\t\tmix(serviceObject, {id: serviceName}, serviceMixin);\n\t\t\t\t\t\tservicesWrap[serviceName] = {\n\t\t\t\t\t\t\tinstance: serviceObject\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Checks wherever service is registered\n\t\t\t * @param {String} serviceName\n\t\t\t * @return {boolean}\n\t\t\t * @public\n\t\t\t * @since 1.0.3\n\t\t\t */\n\t\t\tisRegistered: function (serviceName) {\n\t\t\t\treturn serviceName in servicesWrap;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Checks wherever service is instantiated\n\t\t\t * @param {String} serviceName\n\t\t\t * @return {boolean}\n\t\t\t * @public\n\t\t\t * @since 1.0.3\n\t\t\t */\n\t\t\tisInstantiated: function (serviceName) {\n\t\t\t\tif (!this.isRegistered(serviceName)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ('instance' in servicesWrap[serviceName]) {\n\t\t\t\t\treturn !!servicesWrap[serviceName]['instance'];\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the instance of a registered object with an indicated <serviceName> or creates a new one in the case of\n\t\t\t * lazy instantiation.\n\t\t\t * @param {String} serviceName\n\t\t\t * @return {null|Object}\n\t\t\t * @public\n\t\t\t */\n\t\t\tget: function (serviceName) {\n\t\t\t\tif (!this.isRegistered(serviceName)) {\n\t\t\t\t\tprintLog && console.warn('Service is not registered: ' + serviceName);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (this.isInstantiated(serviceName)) {\n\t\t\t\t\tprintLog && console.warn('Already instantiated: ' + serviceName);\n\t\t\t\t\treturn servicesWrap[serviceName].instance;\n\t\t\t\t}\n\t\t\t\tif (serviceHasCreator(serviceName)) {\n\t\t\t\t\treturn serviceInvoke(serviceName);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Instantiate service by name\n\t\t\t * @param {String} serviceName\n\t\t\t * @return {null|Object}\n\t\t\t * @public\n\t\t\t * @since 1.0.3\n\t\t\t */\n\t\t\tinstantiate: function (serviceName) {\n\t\t\t\tif (!this.isRegistered(serviceName)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (this.isInstantiated(serviceName)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (serviceHasCreator(serviceName)) {\n\t\t\t\t\treturn !!serviceInvoke(serviceName);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Instantiates and returns all registered objects. Can take the <filter> function as an argument.\n\t\t\t * The <filter> function must return the logical value. In case filter is predefined,\n\t\t\t * only the services that underwent the check will be instantiated.\n\t\t\t * @param {Function=} filter\n\t\t\t * @return {Array}\n\t\t\t * @public\n\t\t\t */\n\t\t\tinstantiateAll: function (filter) {\n\t\t\t\tvar name, result = [];\n\t\t\t\tif (typeof filter !== 'function') {\n\t\t\t\t\tfilter = function () {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tfor (name in servicesWrap) {\n\t\t\t\t\tif (!this.isInstantiated(name) && serviceHasCreator(name) && filter(name)) {\n\t\t\t\t\t\tresult.push(serviceInvoke(name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the array or object of instantiated service objects.\n\t\t\t * @param {boolean=false} asObject Get all instances as name-service object. Since 1.0.4.\n\t\t\t * @return {Array<Object>|Object}\n\t\t\t * @public\n\t\t\t */\n\t\t\tgetAllInstantiate: function (asObject) {\n\t\t\t\tvar serviceName, result = asObject ? {} : [];\n\t\t\t\tif (asObject) {\n\t\t\t\t\tfor (serviceName in servicesWrap) {\n\t\t\t\t\t\tif (this.isInstantiated(serviceName)) {\n\t\t\t\t\t\t\tresult[serviceName] = serviceName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (serviceName in servicesWrap) {\n\t\t\t\t\t\tif (this.isInstantiated(serviceName)) {\n\t\t\t\t\t\t\tresult.push(serviceName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Deletes a service <instance> with an indicated <serviceName>.\n\t\t\t * Returns <false> in case the service with the indicated <serviceName> is not found or has no <instance>.\n\t\t\t * This do not remove service itself, only instances of it.\n\t\t\t * @param {String} serviceName\n\t\t\t * @return {boolean}\n\t\t\t * @public\n\t\t\t */\n\t\t\tremoveInstance: function (serviceName) {\n\t\t\t\tif (!servicesWrap[serviceName] || !servicesWrap[serviceName].instance) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdelete servicesWrap[serviceName].instance;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Deletes a service named <serviceName> from <ServiceLocator> and returns it's instance.\n\t\t\t * The flag <removeMixins> points at the necessity to delete the added mixin properties.\n\t\t\t * @param {String} serviceName\n\t\t\t * @param {boolean=} removeMixins - default is false\n\t\t\t * @return {boolean|null|Object}\n\t\t\t * @public\n\t\t\t * @since 1.0.3\n\t\t\t */\n\t\t\tunRegister: function (serviceName, removeMixins) {\n\t\t\t\tif (!this.isRegistered(serviceName)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!this.isInstantiated(serviceName)) {\n\t\t\t\t\tdelete servicesWrap[serviceName];\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tvar instance = null;\n\t\t\t\tif (removeMixins) {\n\t\t\t\t\tinstance = unMix(servicesWrap[serviceName].instance);\n\t\t\t\t} else {\n\t\t\t\t\tinstance = servicesWrap[serviceName].instance;\n\t\t\t\t}\n\t\t\t\tdelete servicesWrap[serviceName];\n\t\t\t\treturn instance;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Deletes all registered services from <ServiceLocator>, and returns the array of their instances.\n\t\t\t * The flag <removeMixin> points at the necessity to delete the added properties in the services\n\t\t\t * that will be deleted.\n\t\t\t * @param {boolean=} removeMixins - default is false\n\t\t\t * @return {Object<Object>}\n\t\t\t * @public\n\t\t\t */\n\t\t\tunRegisterAll: function (removeMixins) {\n\t\t\t\tvar serviceName, result = {}, instance;\n\t\t\t\tfor (serviceName in servicesWrap) {\n\t\t\t\t\tinstance = this.unRegister(serviceName, removeMixins);\n\t\t\t\t\tif (instance) {\n\t\t\t\t\t\tresult[serviceName] = instance;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the array of registered service objects.\n\t\t\t * @return {Array<String>}\n\t\t\t * @public\n\t\t\t * @since 1.0.4\n\t\t\t */\n\t\t\tgetAllRegistered: function () {\n\t\t\t\tvar serviceName, result = [];\n\t\t\t\tfor (serviceName in servicesWrap) {\n\t\t\t\t\tif (this.isRegistered(serviceName)) {\n\t\t\t\t\t\tresult.push(serviceName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t\treturn scope;\n\t}\n\n\tserviceLocator = new ServiceLocator();\n\t/**\n\t * @type {ServiceLocator}\n\t * @public\n\t */\n\tserviceLocator.Constructor = ServiceLocator;\n\treturn serviceLocator;\n}));\n"],"sourceRoot":"/source/"}