{"version":3,"sources":["servicelocator.min.js"],"names":["root","factory","define","amd","ServiceLocator","module","exports","this","mix","object","key","index","mixins","Array","prototype","slice","call","arguments","__mixins","length","undefined","push","invoke","Constructor","mixin","args","Temp","instance","deleteProperty","propertyList","recursion","hasOwnProperty","Object","getPrototypeOf","unmix","serviceInvoke","serviceName","printLog","console","log","servicesWrap","creator","id","serviceMixin","setPrototypeOf","constructor","defineProperty","get","set","value","enumerable","construct","constructorFunction","constructorArguments","isArray","apply","flag","setMixin","objectWithMixins","register","serviceObject","instantiate","warn","result","service","registerAll","arrayOfServices","registered","instantiateAll","filter","getAllInstantiate","removeInstance","unregister","removeMixins","remove","toString","unregisterAll","serviceLocator"],"mappings":"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","file":"servicelocator.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return (root.ServiceLocator = factory());\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = (root.ServiceLocator = factory());\n  } else {\n    root.ServiceLocator = factory();\n  }\n}(this, function () {\n  'use strict';\n  var serviceLocator;\n\n  /**\n   * Service locator\n   * @class ServiceLocator\n   * @constructor\n   * @version 1.0.2\n   */\n  function ServiceLocator() {\n    /**\n     * Wrapper object for services\n     * @type {Object}\n     * @private\n     */\n    var servicesWrap = {};\n    /**\n     * Set of mixins which have to contain all services registered\n     * @type {Object}\n     * @private\n     */\n    var serviceMixin = {};\n    /**\n     * Print log\n     * @type {boolean}\n     * @private\n     */\n    var printLog = false;\n\n    /**\n     * Add mixins to object. Extends with <__mixins> parameter.\n     * @param {Object} object\n     * @param {...*}\n     * @example mix(objectToAddMixin, {id: 12345}, {serviceMixin: function () {}});\n     */\n    function mix(object/*, ...mixins*/) {\n      var mixins = Array.prototype.slice.call(arguments, 1), key, index;\n      object.__mixins = [];\n      for (index = 0; index < mixins.length; ++index) {\n        for (key in mixins[index]) {\n          if (object[key] === undefined) {\n            object[key] = mixins[index][key];\n            object.__mixins.push(key);\n          }\n        }\n      }\n    }\n\n    /**\n     * Invoke new object\n     * @param {Function} Constructor\n     * @param {Object} mixin\n     * @param {Array=} args\n     * @return {Object}\n     */\n    function invoke(Constructor, mixin, args) {\n      var instance;\n\n      function Temp(mixins) {\n        var index, key;\n        if (!mixins) {\n          return this;\n        }\n        this.__mixins = [];\n        for (index = 0; index < mixins.length; ++index) {\n          for (key in mixins[index]) {\n            this[key] = mixin[index][key];\n            this.__mixins.push(key);\n          }\n        }\n      }\n\n      Temp.prototype = Constructor.prototype;\n      Constructor.prototype = new Temp(mixin);\n      instance = new Constructor(args);\n      Constructor.prototype = Temp.prototype;\n      return instance;\n    }\n\n    /**\n     * Remove properties from object\n     * @param {Object} object\n     * @param {Object} propertyList\n     */\n    function deleteProperty(object, propertyList) {\n      var index;\n      if (!object || propertyList.recursion > 1000) {\n        return;\n      }\n      propertyList.recursion++;\n      if (object.hasOwnProperty('__mixins')) {\n        for (index = 0; index < propertyList.length; index += 1) {\n          delete object[propertyList[index]];\n        }\n        delete object.__mixins;\n      } else {\n        deleteProperty(Object.getPrototypeOf(object), propertyList);\n      }\n    }\n\n    /**\n     * Remove <__mixins> from object\n     * @param {Object} object\n     * @return {Object}\n     */\n    function unmix(object) {\n      object.__mixins.recursion = 0;\n      deleteProperty(object, object.__mixins);\n      return object;\n    }\n\n    /**\n     * Instantiate <service>\n     * @param {String} serviceName\n     * @return {Object}\n     */\n    function serviceInvoke(serviceName) {\n      printLog && console.log('Instantiate: ' + serviceName);\n      servicesWrap[serviceName].instance = invoke(\n        servicesWrap[serviceName].creator,\n        [{id: serviceName}, serviceMixin],\n        servicesWrap[serviceName].args || []\n      );\n      return servicesWrap[serviceName].instance;\n    }\n\n    /**\n     * Create new object with defined prototype\n     * @param {Object} object\n     * @param {*} prototype\n     * @return {Object}\n     */\n    function setPrototypeOf(object, prototype) {\n      var constructor = function () {\n        for (var key in object) {\n          if (object.hasOwnProperty(key)) {\n            (function (key) {\n              Object.defineProperty(this, key, {\n                get: function () {\n                  return object[key];\n                },\n                set: function (value) {\n                  object[key] = value;\n                },\n                enumerable: true\n              });\n            }).call(this, key);\n          }\n        }\n      };\n      constructor.prototype = prototype;\n      return new constructor;\n    }\n\n    /**\n     * Create new object with constructor parameters as array\n     * @param {Function} constructorFunction\n     * @param {Array=} constructorArguments\n     * @return {Object}\n     */\n    function construct(constructorFunction, constructorArguments) {\n      Array.isArray(constructorArguments) || (constructorArguments = []);\n      return setPrototypeOf(new function () {\n        this.prototype = constructorFunction.prototype;\n        return constructorFunction.apply(this, constructorArguments);\n      }, constructorFunction.prototype);\n    }\n\n    return {\n      /**\n       * Takes true/false values as a parameter.\n       * When true, writes information about events and channels into the browser console.\n       * @param {boolean=} flag - default is false\n       * @return {Object}\n       * @public\n       */\n      printLog: function (flag) {\n        printLog = !!flag;\n        return this;\n      },\n      /**\n       * Takes an object as a parameter. The object contains a set of additional properties and/or methods,\n       * which have to contain all objects registered in <ServiceLocator>.\n       * @param {Object} objectWithMixins\n       * @return {Object}\n       * @public\n       */\n      setMixin: function (objectWithMixins) {\n        serviceMixin = objectWithMixins;\n        return this;\n      },\n      /**\n       * Registers an object <serviceObject> under the name <serviceName>. The flag <instantiate> shows,\n       * whether lazy instantiation is required to request the object from <ServiceLocator>.\n       * By default instantiate is <true>.\n       * @param {String} serviceName\n       * @param {Function|Object} serviceObject\n       * @param {boolean=} instantiate - default is true\n       * @param {Array=} constructorArguments\n       * @return {boolean}\n       * @public\n       */\n      register: function (serviceName, serviceObject, instantiate, constructorArguments) {\n        if (!serviceObject) {\n          printLog && console.warn('serviceObject argument is empty: ' + serviceName);\n          return false;\n        }\n        if (servicesWrap[serviceName]) {\n          printLog && console.warn('You try to register already registered module: ' + serviceName);\n          return false;\n        }\n        instantiate = arguments.length < 3 ? true : !!instantiate;\n        var result;\n        switch (typeof serviceObject) {\n          case 'function':\n            servicesWrap[serviceName] = {\n              creator: serviceObject\n            };\n            if (Array.isArray(constructorArguments) && constructorArguments.length) {\n              servicesWrap[serviceName].args = constructorArguments;\n            }\n            if (instantiate) {\n              var service;\n              if (servicesWrap[serviceName].args) {\n                service = construct(serviceObject, constructorArguments);\n              } else {\n                service = new serviceObject;\n              }\n              mix(service, {id: serviceName}, serviceMixin);\n              servicesWrap[serviceName].instance = service;\n            }\n            result = true;\n            break;\n          case 'object':\n            mix(serviceObject, {id: serviceName}, serviceMixin);\n            servicesWrap[serviceName] = {\n              instance: serviceObject\n            };\n            result = true;\n            break;\n          default:\n            printLog && console.warn('Service is\\'t a function nor object: ' + serviceName);\n            result = false;\n            break;\n        }\n        return result;\n      },\n      /**\n       * Calls the <register> function for each element of <arrayOfServices>.\n       * Each element of the array must contain one of the <ID> or <id> properties for defining the object name,\n       * and service/object/creator for defining the object under registration.\n       * There is optional <instantiate>.\n       * @param {Array<Object>} arrayOfServices\n       * @return {Array}\n       * @public\n       */\n      registerAll: function (arrayOfServices) {\n        if (!Array.isArray(arrayOfServices) && !arrayOfServices.length) {\n          return [];\n        }\n        var index, service, serviceName, serviceObject, instantiate, registered = [];\n        for (index = 0; index < arrayOfServices.length; ++index) {\n          service = arrayOfServices[index];\n          serviceName = service['ID'] || service['id'] || service['Id'];\n          serviceObject = service['service'] || service['object'] || service['creator'];\n          instantiate = (service['instantiate'] !== undefined) ? !!service['instantiate'] : true;\n          if (this.register(serviceName, serviceObject, instantiate)) {\n            registered.push(serviceName);\n          }\n        }\n        return registered;\n      },\n      /**\n       * Returns the instance of a registered object with an indicated <serviceName> or creates a new one in the case of\n       * lazy instantiation.\n       * @param {String} serviceName\n       * @return {null|Object}\n       * @public\n       */\n      get: function (serviceName) {\n        if (servicesWrap[serviceName] === undefined) {\n          printLog && console.warn('Service is not registered: ' + serviceName);\n          return null;\n        }\n        if ('instance' in servicesWrap[serviceName] && servicesWrap[serviceName].instance) {\n          return servicesWrap[serviceName].instance;\n        }\n        return serviceInvoke(serviceName);\n      },\n      /**\n       * Instantiates and returns all registered objects. Can take the <filter> function as an argument.\n       * The <filter> function must return the logical value. In case filter is predefined,\n       * only the services that underwent the check will be instantiated.\n       * @param {Function=} filter\n       * @return {Array}\n       * @public\n       */\n      instantiateAll: function (filter) {\n        var serviceName, result = [];\n        if (typeof filter !== 'function') {\n          filter = function () {\n            return true;\n          };\n        }\n        for (serviceName in servicesWrap) {\n          if (\n            servicesWrap.hasOwnProperty(serviceName) &&\n            servicesWrap[serviceName].creator && !servicesWrap[serviceName].instance &&\n            filter(serviceName)\n          ) {\n            result.push(serviceInvoke(serviceName));\n          }\n        }\n        return result;\n      },\n      /**\n       * Returns the array of instantiated service objects.\n       * @return {Array<String>}\n       * @public\n       */\n      getAllInstantiate: function () {\n        var serviceName, result = [];\n        for (serviceName in servicesWrap) {\n          if (serviceName in servicesWrap && servicesWrap[serviceName].instance) {\n            result.push(serviceName);\n          }\n        }\n        return result;\n      },\n      /**\n       * Deletes a service <instance> with an indicated <serviceName>.\n       * Returns <false> in case the service with the indicated <serviceName> is not found or has no <instance>.\n       * This do not remove service itself, only instances of it.\n       * @param {String} serviceName\n       * @return {boolean}\n       * @public\n       */\n      removeInstance: function (serviceName) {\n        if (!servicesWrap[serviceName] || !servicesWrap[serviceName].instance) {\n          return false;\n        }\n        delete servicesWrap[serviceName].instance;\n        return true;\n      },\n      /**\n       * Deletes a service named <serviceName> from <ServiceLocator> and returns it's instance.\n       * The flag <removeMixins> points at the necessity to delete the added mixin properties.\n       * @param {Array|String} serviceName\n       * @param {boolean=} removeMixins - default is false\n       * @return {null|Object}\n       * @public\n       */\n      unregister: function (serviceName, removeMixins) {\n        var result, index;\n\n        function remove(id) {\n          var serviceObject, instance;\n          if (!(id in servicesWrap)) {\n            return null;\n          }\n          serviceObject = servicesWrap[id];\n          if (removeMixins && serviceObject.instance) {\n            instance = unmix(serviceObject.instance);\n          } else if (serviceObject.instance) {\n            instance = serviceObject.instance;\n          } else {\n            instance = null;\n          }\n          delete servicesWrap[id];\n          return instance;\n        }\n\n        if (Object.prototype.toString.call(serviceName) === '[object Array]') {\n          result = [];\n          for (index = serviceName.length - 1; index > -1; index--) {\n            result.push(remove(serviceName[index]));\n          }\n        } else {\n          result = remove(serviceName);\n        }\n        return result;\n      },\n      /**\n       * Deletes all registered services from <ServiceLocator>, and returns the array of their instances.\n       * The flag <removeMixin> points at the necessity to delete the added properties in the services\n       * that will be deleted.\n       * @param {boolean=} removeMixins - default is false\n       * @return {Object<Object>}\n       * @public\n       */\n      unregisterAll: function (removeMixins) {\n        var id, result = {}, instance;\n        for (id in servicesWrap) {\n          if (servicesWrap.hasOwnProperty(id)) {\n            instance = this.unregister(id, removeMixins);\n            if (instance) {\n              result[id] = instance;\n            }\n          }\n        }\n        return result;\n      }\n    };\n  }\n\n  serviceLocator = new ServiceLocator();\n  /**\n   * @type {ServiceLocator}\n   * @public\n   */\n  serviceLocator.Constructor = ServiceLocator;\n  return serviceLocator;\n}));\n"],"sourceRoot":"/source/"}